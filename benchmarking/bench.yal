module main;

func partition(a: []i32, low: i32, high: i32) i32 {
    var pivot, i = a[high], low - 1;

    var j = low;
    while j < high {
        defer j = j + 1;
        if a[j] <= pivot {
            i = i + 1;
            a[i], a[j] = a[j], a[i];
        }
    }

    a[i+1], a[high] = a[high], a[i+1];
    return i + 1;
}

func quicksort(a: []i32, low: i32, high: i32) {
    if low < high {
        var pivot = partition(a, low, high);
        quicksort(a, low, pivot-1);
        quicksort(a, pivot+1, high);
    }

    return;
}

func print_items(items: []i32) {
    var i: usize = 0;
    while i < items.len {
        defer i = i + 1;

        c_printf("%d, ".ptr, items[i]);
    }

    c_printf("\n".ptr);
    return;
}

func read_values(path: [*]const u8, count: usize) []i32 {
    var f = c_fopen(path, "rb".ptr);
    if f as usize == 0 { return [_]i32{}[:]; }

    defer c_fclose(f);

    var ok = true;
    var buffer = c_malloc(sizeof(i32) * count) as [*]i32;
    defer if ok == false { c_free(buffer); }

    var read = c_fread(buffer, sizeof(i32), count, f);
    if read != count {
        ok = false;
        return [_]i32{}[:];
    }

    return buffer[:count];
}

func gen_file(path: [*]const u8, n: usize) {
    var f = c_fopen(path, "wb".ptr);
    defer c_fclose(f);

    var i: usize = 0;
    while i < n {
        defer i = i + 1;

        var v = c_rand() % n as i32;
        var v = v;
        var n = c_fwrite(&v, sizeof(i32), 1, f);
    }

    return;
}

def Args = struct {
    input_file_path: [*]const u8,
    mode: i32,
};

func print_help(self: [*]const u8) {
    c_printf("usage: %s <mode> [args]\n".ptr, self);
    c_printf("    options:\n".ptr);
    c_printf("        -gen <count>: generate `count` numbers\n".ptr);
    c_printf("        -sort <count>: sort `count` numbers\n".ptr);

    return;
}

func main(argc: i32, argv: [*][*]u8) i32 {
    var argv = argv[:argc];
    var self = argv[0];

    var args: Args = .{
        .input_file_path = "numbers.bin".ptr,
        .mode = 0,
    };

    argv = argv[1:];
    if argv.len == 0 {
        c_printf("error: missing arguments, expected mode\n".ptr);
        print_help(self);
        return 1;
    }

    var mode = argv[0];
    if c_strcmp(mode, "-gen".ptr) == 0 {
        args.mode = 1;
    } else if c_strcmp(mode, "-sort".ptr) == 0 {
        args.mode = 2;
    } else {
        c_printf("error: invalid mode: %s\n".ptr, mode);
        print_help(self);
        return 1;
    }

    argv = argv[1:];
    if argv.len == 0 {
        c_printf("error: missing arguments, expected count after %s\n".ptr, mode);
        print_help(self);
        return 1;
    }

    var count_s = argv[0];
    var count = c_atoi(count_s);
    if count == 0 {
        c_printf("error: invalid count: %s\n".ptr, count_s);
        return 1;
    }

    if args.mode == 1 {
        gen_file(args.input_file_path, count as usize);
        return 0;
    }


    var items = read_values(args.input_file_path, count as usize);
    print_items(items);

    quicksort(items, 0, items.len as i32 - 1);
    print_items(items);

    return 0;
}

// vim: ft=yal

