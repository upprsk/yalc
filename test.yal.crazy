module main;

def File = struct {
    path: string_view,
};

def Location = struct {
    file:  File,
    start: usize,
    end:   usize,
}:

// ----------------------------------------------------------------------------

def Value = any;

def Attribute = struct {
    name:   string_view,
    args:   []const Value,
    kwargs: []const struct { key: string_view, value: Value },
};

def StructField = struct {
    name:       string_view,
    type:       type,
    init:       Value,
    attributes: []const Attribute,
};

func StructField.find_attr(s: StructField, name: string_view) ?Attribute {
    for attr in s.attributes {
        if attr.name == name { return attr; }
    }

    return nil;
}

def TypeInfo = tagged union {
    struct: Struct,
};

def Struct = struct {
    name:       string_view,
    location:   Location,
    fields:     []const StructField,
};

def Decl = struct {
    local_name: string_view,
    link_name:  string_view,
    full_name:  string_view,
    location:   Location,
    attributes: []const Attributes,
};

// ----------------------------------------------------------------------------

// `unique` is available from the compiler to generate a unique string key. It
// can only be used with compile-time values.
def args_key = unique("argdata");

def Args = []ArgDesc;

def ArgDesc = struct {
    field_name: string_view,
    long:       string_view,
    short:      string_view,
    default:    any,

    is_flag: bool,
};

func Args.find_short(args: Args, short_name: string_view) ?ArgDesc {
    for arg in args {
        if arg.short == short_name {
            return arg;
        }
    }

    return nil;
}

func Args.find_long(args: Args, long_name: string_view) ?ArgDesc {
    for arg in args {
        if arg.long == long_name {
            return arg;
        }
    }

    return nil;
}

@attribute
func args(s: Decl) {
    // tagof is a compile-time function that returns the tag of a tagged union
    ensure(tagof(s) == .struct);
    var s = s.struct;

    // make some magic. The `Decl` struct is magical, and the slices in it have
    // know values. Because of that, we can use the field count as the array
    // size.
    var options: [s.fields.len]ArgDesc;
    var i: usize = 0;

    for field in s.fields {
        var attr = field.find_attr("option");
        if attr == nil { continue; }
        var attr = attr.*;

        var arg_desc: ArgDesc;
        arg_desc.field_name = field.name;

        if var opt = attr.find_kwarg("short"); opt != nil {
            arg_desc.short = opt.value as string_view;
        }

        if var opt = attr.find_kwarg("long"); opt != nil {
            arg_desc.long = opt.value as string_view;
        } else {
            arg_desc.long = field.name;
        }

        arg_desc.default = field.init;

        if field.type == bool {
            arg_desc.is_flag = true;
        }

        options[i] = arg_desc;
        i += 1;
    }

    s.add_custom_data(args_key, options[:i]);
}

func parse_args[T](argc: i32, argv: [*][*]u8) (out: T, ok: bool = true) {
    def options = get_custom_data[T]() as Args;
    def info    = get_type_info[T]().struct;
    var args    = argv[:argc];

    var i: usize = 0;
    while i < args.len {
        defer i += 1;

        var arg = args[i][:c.strlen(args[i])] as string_view;

        // long option
        if arg[:2] == "--" {
            if var opt = options.find_long(arg[2:]); opt != nil {
                if opt.is_flag {
                    // inline for needed because of the comptime-unrolling needed for #field
                    inline for field in info.fields {
                        if field.name == opt.field_name {
                            #field(out, field.name) = true;
                        }
                    }
                } else panic("nyet implemented");
            } else {
                fmt.eprintln("unknown long option: {}", arg[2:]);
                ok = false;
            }
        }

        // short option
        else if arg[:1] == "-" {
            if var opt = options.find_short(arg[1:]); opt != nil {
                if opt.is_flag {
                    inline for field in info.fields {
                        if field.name == opt.field_name {
                            #field(out, field.name) = true;
                        }
                    }
                } else panic("nyet implemented");
            } else {
                fmt.eprintln("unknown short option: {}", arg[1:]);
                ok = false;
            }
        }

        else {
            fmt.eprintln("unknown option: {}", arg);
            ok = false;
        }
    }

    return;
}

// ----------------------------------------------------------------------------

@args
def ProgramArgs = struct {
    @option(short="-v")
    verbose: bool = false,
};

func main(argc: i32, argv: [*][*]u8) i32 {
    var args, ok = parse_args[ProgramArgs](argc, argv);
    if !ok {
        return 1;
    }

    if args.verbose {
        fmt.println("verbose: yay!");
    }

    return 0;
}

// vim: ft=yal
