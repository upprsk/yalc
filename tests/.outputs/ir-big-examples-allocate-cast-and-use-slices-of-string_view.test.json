{"stdout":"func \"main_mkargs\"(%0: Slice) Slice {\n@0\n    %1 = IntConst<usize> 16\n    %2 = Load<usize> +8, %0\n    %3 = Mul<usize> %1, %2\n    %4 = Call<ptr> malloc(%3)\n    %5 = Alloca<Slice> 16/8\n    %6 = Load<usize> +8, %0\n    %7 = Copy<ptr> %4\n    Store +0, %5, %7\n    Store +8, %5, %6\n    %10 = Copy<Slice> %5\n    %11 = IntConst<usize> 0\n    %12 = Copy<usize> %11\n    jmp @1\n@1\n    %13 = Load<usize> +8, %10\n    %14 = Lt<u8> %12, %13\n    branch %14, @2 @3\n@2\n    %15 = Load<ptr> +0, %0\n    %16 = IntConst<usize> 8\n    %17 = Mul<usize> %12, %16\n    %18 = Add<ptr> %15, %17\n    %19 = Load<ptr> +0, %18\n    %20 = Alloca<Slice> 16/8\n    %21 = Load<ptr> +0, %0\n    %22 = IntConst<usize> 8\n    %23 = Mul<usize> %12, %22\n    %24 = Add<ptr> %21, %23\n    %25 = Load<ptr> +0, %24\n    %26 = Call<usize> strlen(%25)\n    %27 = Copy<ptr> %19\n    Store +0, %20, %27\n    Store +8, %20, %26\n    %30 = Load<ptr> +0, %10\n    %31 = IntConst<usize> 16\n    %32 = Mul<usize> %12, %31\n    %33 = Add<ptr> %30, %32\n    Store +0, %33, %20\n    %35 = IntConst<usize> 1\n    %36 = Add<usize> %12, %35\n    SetTmp %12, %36\n    jmp @1\n@3\n    ret %10\n}\nexport func \"main\"(%0: i32, %1: ptr) i32 {\n@0\n    %2 = Alloca<Slice> 16/8\n    %3 = Ext<isize> %0\n    %4 = Copy<ptr> %1\n    Store +0, %2, %4\n    Store +8, %2, %3\n    %7 = Call<Slice> main_mkargs(%2)\n    %8 = IntConst<usize> 0\n    %9 = Copy<usize> %8\n    jmp @1\n@1\n    %10 = Load<usize> +8, %7\n    %11 = Lt<u8> %9, %10\n    branch %11, @2 @3\n@2\n    %12 = Alloca<string_view> 16/8\n    %13 = StrConst<ptr> 0\n    Store +0, %12, %13\n    %15 = IntConst<usize> 14\n    Store +8, %12, %15\n    %17 = Load<ptr> +0, %12\n    %18 = Load<ptr> +0, %7\n    %19 = IntConst<usize> 16\n    %20 = Mul<usize> %9, %19\n    %21 = Add<ptr> %18, %20\n    %22 = Load<string_view> +0, %21\n    %23 = Load<ptr> +0, %22\n    CallVoid printf(%17, %9, %23)\n    %25 = IntConst<usize> 1\n    %26 = Add<usize> %9, %25\n    SetTmp %9, %26\n    jmp @1\n@3\n    %28 = IntConst<i32> 0\n    %29 = Load<ptr> +0, %7\n    CallVoid free(%29)\n    ret %28\n}\nextern func \"strlen\"(%0: ptr) usize;\nextern func \"printf\"(%0: ptr);\nextern func \"malloc\"(%0: usize) ptr;\nextern func \"free\"(%0: ptr);\ndata $str_0 = \"args[%d] = %s\\n\"\n"}