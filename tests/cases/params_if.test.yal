func process(a: i32, b: i32) i32 {
    if a != 0 {
        b = b * 2;
    } else {
        b = b * 3;
    }

    return b;
}

// OUTPUT:
// File(void, [Func(func(i32, i32) i32, Id({![1fffffff]}, process), [FuncArg(i32, a, Id(type, i32)), FuncArg(i32, b, Id(type, i32))], Id(type, i32), Block(void, [IfStmtWithElse(void, NotEqual(bool, Id(i32, a), Int(i32, 0)), Block(void, [Assign(void, Id({![1fffffff]}, b), Mul(i32, Id(i32, b), Int(i32, 2)))]), Block(void, [Assign(void, Id({![1fffffff]}, b), Mul(i32, Id(i32, b), Int(i32, 3)))])), ReturnStmt(void, Id(i32, b))]))])
// process: # func(i32, i32) i32
// locals: [(0, "a", i32), (1, "b", i32)]
// calls: []
// b 0:
// 0000 | LoadLocal 0 ("a", i32)
// 0001 | Const 0 (variant(0), i32)
// 0002 | Neq
// 0003 | Branch b 1, 2
// b 1:
// 0000 | LoadLocal 1 ("b", i32)
// 0001 | Const 0 (variant(2), i32)
// 0002 | Mul
// 0003 | StoreLocal 1 ("b", i32)
// 0004 | Jump j 3
// b 2:
// 0000 | LoadLocal 1 ("b", i32)
// 0001 | Const 0 (variant(3), i32)
// 0002 | Mul
// 0003 | StoreLocal 1 ("b", i32)
// 0004 | Jump j 3
// b 3:
// 0000 | LoadLocal 1 ("b", i32)
// 0001 | Ret
// 
