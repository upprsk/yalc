func allowed_1(age: i32) bool {
    return age > 17;
}

func allowed_2(age: i32) bool {
    return age >= 18;
}

func allowed_3(age: i32) bool {
    return !(age < 18);
}

func allowed_4(age: i32) bool {
    return !(age <= 17);
}

// OUTPUT:
// File(void, [Func(func(i32) bool, Id({![1fffffff]}, allowed_1), [FuncArg(i32, age, Id(type, i32))], Id(type, bool), Block(void, [ReturnStmt(void, Greater(bool, Id(i32, age), Int(i32, 17)))])), Func(func(i32) bool, Id({![1fffffff]}, allowed_2), [FuncArg(i32, age, Id(type, i32))], Id(type, bool), Block(void, [ReturnStmt(void, GreaterEqual(bool, Id(i32, age), Int(i32, 18)))])), Func(func(i32) bool, Id({![1fffffff]}, allowed_3), [FuncArg(i32, age, Id(type, i32))], Id(type, bool), Block(void, [ReturnStmt(void, LogicNot(bool, Smaller(bool, Id(i32, age), Int(i32, 18))))])), Func(func(i32) bool, Id({![1fffffff]}, allowed_4), [FuncArg(i32, age, Id(type, i32))], Id(type, bool), Block(void, [ReturnStmt(void, LogicNot(bool, SmallerEqual(bool, Id(i32, age), Int(i32, 17))))]))])
// allowed_1: # func(i32) bool
// locals: [(0, "age", i32)]
// calls: []
// b 0:
// 0000 | LoadLocal ! 0 ("age", i32)
// 0001 | Const ! 0 (variant(17), i32)
// 0002 | Gt !
// 0003 | Ret !
// allowed_2: # func(i32) bool
// locals: [(0, "age", i32)]
// calls: []
// b 0:
// 0000 | LoadLocal ! 0 ("age", i32)
// 0001 | Const ! 0 (variant(18), i32)
// 0002 | Gte !
// 0003 | Ret !
// allowed_3: # func(i32) bool
// locals: [(0, "age", i32)]
// calls: []
// b 0:
// 0000 | LoadLocal ! 0 ("age", i32)
// 0001 | Const ! 0 (variant(18), i32)
// 0002 | Lt !
// 0003 | LogicNot !
// 0004 | Ret !
// allowed_4: # func(i32) bool
// locals: [(0, "age", i32)]
// calls: []
// b 0:
// 0000 | LoadLocal ! 0 ("age", i32)
// 0001 | Const ! 0 (variant(17), i32)
// 0002 | Lte !
// 0003 | LogicNot !
// 0004 | Ret !
// 
