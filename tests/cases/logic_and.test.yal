func test_and(a: i32, b: i32) bool {
    return a == 0 and b != a;
}

// OUTPUT:
// File(void, [Func(func(i32, i32) bool, Id({![1fffffff]}, test_and), [FuncArg(i32, a, Id(type, i32)), FuncArg(i32, b, Id(type, i32))], Id(type, bool), Block(void, [ReturnStmt(void, LogicAnd(bool, Equal(bool, Id(i32, a), Int(i32, 0)), NotEqual(bool, Id(i32, b), Id(i32, a))))]))])
// test_and: # func(i32, i32) bool
// locals: [(0, "a", i32), (1, "b", i32)]
// calls: []
// b 0:
// 0000 | LoadLocal 0 ("a", i32)
// 0001 | Const 0 (variant(0), i32)
// 0002 | Eq
// 0003 | Branch b 1, 2
// b 1:
// 0000 | LoadLocal 1 ("b", i32)
// 0001 | LoadLocal 0 ("a", i32)
// 0002 | Neq
// 0003 | Jump j 2
// b 2:
// 0000 | Ret
// 
