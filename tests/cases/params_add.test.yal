func add(x: i32, y: i32) i32 {
    return x + y;
}

func add_one(v: i32) i32 {
    return v + 1;
}

func answer() i32 { return 42; }

// OUTPUT:
// File(void, [Func(func(i32, i32) i32, Id({![1fffffff]}, add), [FuncArg(i32, x, Id(type, i32)), FuncArg(i32, y, Id(type, i32))], Id(type, i32), Block(void, [ReturnStmt(void, Add(i32, Id(i32, x), Id(i32, y)))])), Func(func(i32) i32, Id({![1fffffff]}, add_one), [FuncArg(i32, v, Id(type, i32))], Id(type, i32), Block(void, [ReturnStmt(void, Add(i32, Id(i32, v), Int(i32, 1)))])), Func(func() i32, Id({![1fffffff]}, answer), [], Id(type, i32), Block(void, [ReturnStmt(void, Int(i32, 42))]))])
// add: # func(i32, i32) i32
// locals: [(0, "x", i32), (1, "y", i32)]
// calls: []
// b 0:
// 0000 | LoadLocal ! 0 ("x", i32)
// 0001 | LoadLocal ! 1 ("y", i32)
// 0002 | Add w
// 0003 | Ret !
// add_one: # func(i32) i32
// locals: [(0, "v", i32)]
// calls: []
// b 0:
// 0000 | LoadLocal ! 0 ("v", i32)
// 0001 | Const ! 0 (variant(1), i32)
// 0002 | Add w
// 0003 | Ret !
// answer: # func() i32
// locals: []
// calls: []
// b 0:
// 0000 | Const ! 0 (variant(42), i32)
// 0001 | Ret !
// 
