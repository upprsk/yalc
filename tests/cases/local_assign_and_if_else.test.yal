func test_01() {
    var x = 70;
    if 1 == 1 {
        x = x - 1;
    } else {
        x = x + 1;
    }
}

// OUTPUT:
// File(void, [Func(func() void, Id({![1fffffff]}, test_01), [], Nil({![1fffffff]}), Block(void, [VarDecl(void, Id({![1fffffff]}, x), Nil({![1fffffff]}), Int(i32, 70)), IfStmtWithElse(void, Equal(bool, Int(i32, 1), Int(i32, 1)), Block(void, [Assign(void, Id({![1fffffff]}, x), Sub(i32, Id(i32, x), Int(i32, 1)))]), Block(void, [Assign(void, Id({![1fffffff]}, x), Add(i32, Id(i32, x), Int(i32, 1)))]))]))])
// test_01: # func() void
// locals: [(0, "x", i32)]
// calls: []
// b 0:
// 0000 | Const ! 0 (variant(70), i32)
// 0001 | AddLocal w 0 ("x", i32)
// 0002 | Const ! 1 (variant(1), i32)
// 0003 | Const ! 2 (variant(1), i32)
// 0004 | Eq !
// 0005 | Branch ! b 1, 2
// b 1:
// 0000 | LoadLocal ! 0 ("x", i32)
// 0001 | Const ! 0 (variant(1), i32)
// 0002 | Sub w
// 0003 | StoreLocal ! 0 ("x", i32)
// 0004 | Jump ! j 3
// b 2:
// 0000 | LoadLocal ! 0 ("x", i32)
// 0001 | Const ! 0 (variant(1), i32)
// 0002 | Add w
// 0003 | StoreLocal ! 0 ("x", i32)
// 0004 | Jump ! j 3
// b 3:
// 
