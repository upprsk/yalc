func add_usize(x: usize, y: usize) usize {
    return x + y;
}

func add_isize(x: isize, y: isize) isize {
    return x + y;
}

func add_u64(x: u64, y: u64) u64 {
    return x + y;
}

func add_i64(x: i64, y: i64) i64 {
    return x + y;
}

func add_u32(x: u32, y: u32) u32 {
    return x + y;
}

func add_i32(x: i32, y: i32) i32 {
    return x + y;
}

func add_u16(x: u16, y: u16) u16 {
    return x + y;
}

func add_i16(x: i16, y: i16) i16 {
    return x + y;
}

func add_u8(x: u8, y: u8) u8 {
    return x + y;
}

func add_i8(x: i8, y: i8) i8 {
    return x + y;
}

// OUTPUT:
// File(void, [Func(func(usize, usize) usize, Id({![1fffffff]}, add_usize), [FuncArg(usize, x, Id(type, usize)), FuncArg(usize, y, Id(type, usize))], Id(type, usize), Block(void, [ReturnStmt(void, Add(usize, Id(usize, x), Id(usize, y)))])), Func(func(isize, isize) isize, Id({![1fffffff]}, add_isize), [FuncArg(isize, x, Id(type, isize)), FuncArg(isize, y, Id(type, isize))], Id(type, isize), Block(void, [ReturnStmt(void, Add(isize, Id(isize, x), Id(isize, y)))])), Func(func(u64, u64) u64, Id({![1fffffff]}, add_u64), [FuncArg(u64, x, Id(type, u64)), FuncArg(u64, y, Id(type, u64))], Id(type, u64), Block(void, [ReturnStmt(void, Add(u64, Id(u64, x), Id(u64, y)))])), Func(func(i64, i64) i64, Id({![1fffffff]}, add_i64), [FuncArg(i64, x, Id(type, i64)), FuncArg(i64, y, Id(type, i64))], Id(type, i64), Block(void, [ReturnStmt(void, Add(i64, Id(i64, x), Id(i64, y)))])), Func(func(u32, u32) u32, Id({![1fffffff]}, add_u32), [FuncArg(u32, x, Id(type, u32)), FuncArg(u32, y, Id(type, u32))], Id(type, u32), Block(void, [ReturnStmt(void, Add(u32, Id(u32, x), Id(u32, y)))])), Func(func(i32, i32) i32, Id({![1fffffff]}, add_i32), [FuncArg(i32, x, Id(type, i32)), FuncArg(i32, y, Id(type, i32))], Id(type, i32), Block(void, [ReturnStmt(void, Add(i32, Id(i32, x), Id(i32, y)))])), Func(func(u16, u16) u16, Id({![1fffffff]}, add_u16), [FuncArg(u16, x, Id(type, u16)), FuncArg(u16, y, Id(type, u16))], Id(type, u16), Block(void, [ReturnStmt(void, Add(u16, Id(u16, x), Id(u16, y)))])), Func(func(i16, i16) i16, Id({![1fffffff]}, add_i16), [FuncArg(i16, x, Id(type, i16)), FuncArg(i16, y, Id(type, i16))], Id(type, i16), Block(void, [ReturnStmt(void, Add(i16, Id(i16, x), Id(i16, y)))])), Func(func(u8, u8) u8, Id({![1fffffff]}, add_u8), [FuncArg(u8, x, Id(type, u8)), FuncArg(u8, y, Id(type, u8))], Id(type, u8), Block(void, [ReturnStmt(void, Add(u8, Id(u8, x), Id(u8, y)))])), Func(func(i8, i8) i8, Id({![1fffffff]}, add_i8), [FuncArg(i8, x, Id(type, i8)), FuncArg(i8, y, Id(type, i8))], Id(type, i8), Block(void, [ReturnStmt(void, Add(i8, Id(i8, x), Id(i8, y)))]))])
// add_usize: # func(usize, usize) usize
// locals: [(0, "x", usize), (1, "y", usize)]
// calls: []
// b 0:
// 0000 | LoadLocal ! 0 ("x", usize)
// 0001 | LoadLocal ! 1 ("y", usize)
// 0002 | Add l
// 0003 | Ret !
// add_isize: # func(isize, isize) isize
// locals: [(0, "x", isize), (1, "y", isize)]
// calls: []
// b 0:
// 0000 | LoadLocal ! 0 ("x", isize)
// 0001 | LoadLocal ! 1 ("y", isize)
// 0002 | Add l
// 0003 | Ret !
// add_u64: # func(u64, u64) u64
// locals: [(0, "x", u64), (1, "y", u64)]
// calls: []
// b 0:
// 0000 | LoadLocal ! 0 ("x", u64)
// 0001 | LoadLocal ! 1 ("y", u64)
// 0002 | Add l
// 0003 | Ret !
// add_i64: # func(i64, i64) i64
// locals: [(0, "x", i64), (1, "y", i64)]
// calls: []
// b 0:
// 0000 | LoadLocal ! 0 ("x", i64)
// 0001 | LoadLocal ! 1 ("y", i64)
// 0002 | Add l
// 0003 | Ret !
// add_u32: # func(u32, u32) u32
// locals: [(0, "x", u32), (1, "y", u32)]
// calls: []
// b 0:
// 0000 | LoadLocal ! 0 ("x", u32)
// 0001 | LoadLocal ! 1 ("y", u32)
// 0002 | Add w
// 0003 | Ret !
// add_i32: # func(i32, i32) i32
// locals: [(0, "x", i32), (1, "y", i32)]
// calls: []
// b 0:
// 0000 | LoadLocal ! 0 ("x", i32)
// 0001 | LoadLocal ! 1 ("y", i32)
// 0002 | Add w
// 0003 | Ret !
// add_u16: # func(u16, u16) u16
// locals: [(0, "x", u16), (1, "y", u16)]
// calls: []
// b 0:
// 0000 | LoadLocal ! 0 ("x", u16)
// 0001 | LoadLocal ! 1 ("y", u16)
// 0002 | Add h
// 0003 | Ret !
// add_i16: # func(i16, i16) i16
// locals: [(0, "x", i16), (1, "y", i16)]
// calls: []
// b 0:
// 0000 | LoadLocal ! 0 ("x", i16)
// 0001 | LoadLocal ! 1 ("y", i16)
// 0002 | Add h
// 0003 | Ret !
// add_u8: # func(u8, u8) u8
// locals: [(0, "x", u8), (1, "y", u8)]
// calls: []
// b 0:
// 0000 | LoadLocal ! 0 ("x", u8)
// 0001 | LoadLocal ! 1 ("y", u8)
// 0002 | Add b
// 0003 | Ret !
// add_i8: # func(i8, i8) i8
// locals: [(0, "x", i8), (1, "y", i8)]
// calls: []
// b 0:
// 0000 | LoadLocal ! 0 ("x", i8)
// 0001 | LoadLocal ! 1 ("y", i8)
// 0002 | Add b
// 0003 | Ret !
// 
