extern func putchar(c: i32);

func main() i32 {
    putchar(0x48); // H
    putchar(0x65); // e
    putchar(0x6C); // l
    putchar(0x6C); // l
    putchar(0x6F); // o
    putchar(0x2C); // ,
    putchar(0x20); // 
    putchar(0x57); // W
    putchar(0x6F); // o
    putchar(0x72); // r
    putchar(0x6C); // l
    putchar(0x64); // d
    putchar(0x21); // !
    putchar(0x0A); // \n

    return 0;
}

// OUTPUT:
// File(void, [FuncExtern(func(i32) void, Id({![1fffffff]}, putchar), [FuncArg(i32, c, Id(type, i32))], Nil({![1fffffff]})), Func(func() i32, Id({![1fffffff]}, main), [], Id(type, i32), Block(void, [ExprStmt(void, Call(void, Id(func(i32) void, putchar), [Int(i32, 72)])), ExprStmt(void, Call(void, Id(func(i32) void, putchar), [Int(i32, 101)])), ExprStmt(void, Call(void, Id(func(i32) void, putchar), [Int(i32, 108)])), ExprStmt(void, Call(void, Id(func(i32) void, putchar), [Int(i32, 108)])), ExprStmt(void, Call(void, Id(func(i32) void, putchar), [Int(i32, 111)])), ExprStmt(void, Call(void, Id(func(i32) void, putchar), [Int(i32, 44)])), ExprStmt(void, Call(void, Id(func(i32) void, putchar), [Int(i32, 32)])), ExprStmt(void, Call(void, Id(func(i32) void, putchar), [Int(i32, 87)])), ExprStmt(void, Call(void, Id(func(i32) void, putchar), [Int(i32, 111)])), ExprStmt(void, Call(void, Id(func(i32) void, putchar), [Int(i32, 114)])), ExprStmt(void, Call(void, Id(func(i32) void, putchar), [Int(i32, 108)])), ExprStmt(void, Call(void, Id(func(i32) void, putchar), [Int(i32, 100)])), ExprStmt(void, Call(void, Id(func(i32) void, putchar), [Int(i32, 33)])), ExprStmt(void, Call(void, Id(func(i32) void, putchar), [Int(i32, 10)])), ReturnStmt(void, Int(i32, 0))]))])
// putchar: # func(i32) void
// locals: [(0, "c", i32)]
// calls: []
// main: # func() i32
// locals: []
// calls: [0]
// b 0:
// 0000 | Const 0 (variant(72), i32)
// 0001 | Call {0}
// 0002 | Pop 1
// 0003 | Const 1 (variant(101), i32)
// 0004 | Call {0}
// 0005 | Pop 1
// 0006 | Const 2 (variant(108), i32)
// 0007 | Call {0}
// 0008 | Pop 1
// 0009 | Const 3 (variant(108), i32)
// 0010 | Call {0}
// 0011 | Pop 1
// 0012 | Const 4 (variant(111), i32)
// 0013 | Call {0}
// 0014 | Pop 1
// 0015 | Const 5 (variant(44), i32)
// 0016 | Call {0}
// 0017 | Pop 1
// 0018 | Const 6 (variant(32), i32)
// 0019 | Call {0}
// 0020 | Pop 1
// 0021 | Const 7 (variant(87), i32)
// 0022 | Call {0}
// 0023 | Pop 1
// 0024 | Const 8 (variant(111), i32)
// 0025 | Call {0}
// 0026 | Pop 1
// 0027 | Const 9 (variant(114), i32)
// 0028 | Call {0}
// 0029 | Pop 1
// 0030 | Const 10 (variant(108), i32)
// 0031 | Call {0}
// 0032 | Pop 1
// 0033 | Const 11 (variant(100), i32)
// 0034 | Call {0}
// 0035 | Pop 1
// 0036 | Const 12 (variant(33), i32)
// 0037 | Call {0}
// 0038 | Pop 1
// 0039 | Const 13 (variant(10), i32)
// 0040 | Call {0}
// 0041 | Pop 1
// 0042 | Const 14 (variant(0), i32)
// 0043 | Ret
// 
