func add(x: i32, y: i32) i32 {
    return x + y;
}

func sub(x: i32, y: i32) i32 {
    return x - y;
}

func main() {
    var x = add(12, 2);
    var y = sub(add(x, x), 10);
}

// OUTPUT:
// File(void, [Func(func(i32, i32) i32, Id({![1fffffff]}, add), [FuncArg(i32, x, Id(type, i32)), FuncArg(i32, y, Id(type, i32))], Id(type, i32), Block(void, [ReturnStmt(void, Add(i32, Id(i32, x), Id(i32, y)))])), Func(func(i32, i32) i32, Id({![1fffffff]}, sub), [FuncArg(i32, x, Id(type, i32)), FuncArg(i32, y, Id(type, i32))], Id(type, i32), Block(void, [ReturnStmt(void, Sub(i32, Id(i32, x), Id(i32, y)))])), Func(func() void, Id({![1fffffff]}, main), [], Nil({![1fffffff]}), Block(void, [VarDecl(void, Id({![1fffffff]}, x), Nil({![1fffffff]}), Call(i32, Id(func(i32, i32) i32, add), [Int(i32, 12), Int(i32, 2)])), VarDecl(void, Id({![1fffffff]}, y), Nil({![1fffffff]}), Call(i32, Id(func(i32, i32) i32, sub), [Call(i32, Id(func(i32, i32) i32, add), [Id(i32, x), Id(i32, x)]), Int(i32, 10)]))]))])
// add: # func(i32, i32) i32
// locals: [(0, "x", i32), (1, "y", i32)]
// calls: []
// b 0:
// 0000 | LoadLocal ! 0 ("x", i32)
// 0001 | LoadLocal ! 1 ("y", i32)
// 0002 | Add w
// 0003 | Ret !
// sub: # func(i32, i32) i32
// locals: [(0, "x", i32), (1, "y", i32)]
// calls: []
// b 0:
// 0000 | LoadLocal ! 0 ("x", i32)
// 0001 | LoadLocal ! 1 ("y", i32)
// 0002 | Sub w
// 0003 | Ret !
// main: # func() void
// locals: [(0, "x", i32), (1, "y", i32)]
// calls: [0, 1]
// b 0:
// 0000 | Const ! 0 (variant(12), i32)
// 0001 | Const ! 1 (variant(2), i32)
// 0002 | Call ! {0}
// 0003 | AddLocal w 0 ("x", i32)
// 0004 | LoadLocal ! 0 ("x", i32)
// 0005 | LoadLocal ! 0 ("x", i32)
// 0006 | Call ! {0}
// 0007 | Const ! 2 (variant(10), i32)
// 0008 | Call ! {1}
// 0009 | AddLocal w 1 ("y", i32)
// 
