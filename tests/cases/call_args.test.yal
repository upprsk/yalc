func add(x: i32, y: i32) i32 {
    return x + y;
}

func add_twice(x: i32, y: i32) i32 {
    return add(add(x, y), add(x, y));
}

// OUTPUT:
// File(void, [Func(func(i32, i32) i32, Id({![1fffffff]}, add), [FuncArg(i32, x, Id(type, i32)), FuncArg(i32, y, Id(type, i32))], Id(type, i32), Block(void, [ReturnStmt(void, Add(i32, Id(i32, x), Id(i32, y)))])), Func(func(i32, i32) i32, Id({![1fffffff]}, add_twice), [FuncArg(i32, x, Id(type, i32)), FuncArg(i32, y, Id(type, i32))], Id(type, i32), Block(void, [ReturnStmt(void, Call(i32, Id(func(i32, i32) i32, add), [Call(i32, Id(func(i32, i32) i32, add), [Id(i32, x), Id(i32, y)]), Call(i32, Id(func(i32, i32) i32, add), [Id(i32, x), Id(i32, y)])]))]))])
// add: # func(i32, i32) i32
// locals: [(0, "x", i32), (1, "y", i32)]
// calls: []
// b 0:
// 0000 | LoadLocal ! 0 ("x", i32)
// 0001 | LoadLocal ! 1 ("y", i32)
// 0002 | Add w
// 0003 | Ret !
// add_twice: # func(i32, i32) i32
// locals: [(0, "x", i32), (1, "y", i32)]
// calls: [0]
// b 0:
// 0000 | LoadLocal ! 0 ("x", i32)
// 0001 | LoadLocal ! 1 ("y", i32)
// 0002 | Call ! {0}
// 0003 | LoadLocal ! 0 ("x", i32)
// 0004 | LoadLocal ! 1 ("y", i32)
// 0005 | Call ! {0}
// 0006 | Call ! {0}
// 0007 | Ret !
// 
