img(src="Inatel.png" class="h-10 fixed left-3 top-3")

div.reveal
  div.slides
    section
      h1 Yet Another Language
      h2 (YAL)

      .grid.grid-cols-2.mt-40
        small Lucas da Silveira Ross
        small Marcelo V. C. Arag√£o

      aside.notes.
        Hi!

    section
      h2 Outline

      ol
        li Introdu√ß√£o
        li Proposta
        li Descri√ß√£o Sint√°tica e Sem√¢ntica
        li Ferramentas
        li Avalia√ß√£o

    section
      section(data-auto-animate="")
        h6: i Introdu√ß√£o
        h2 Linguagens de Programa√ß√£o de Sistemas

        p Possuem requistos diferentes de linguagens de alto n√≠vel.

        ul
          li.fragment #[i Runtime] m√≠nimo, ou seja, pouco #[i overhead] obrigat√≥rio
          li.fragment Uso determin√≠stico de mem√≥ria
          li.fragment Acesso direto ao #[i hardware] quando necess√°rio

        aside.notes.
          Explicar quanto ao que seria um runtime, e o que significa ele ser minimo.
          Tambem eh legal falar sobre FFIs.

      section(data-auto-animate="")
        h6: i Introdu√ß√£o
        h2 Linguagens de Programa√ß√£o de Sistemas

        p #[i Features] comums que s√£o desencorajadas:

        ul
          li.fragment Tipagem din√¢mica
          li.fragment Virtualiza√ß√£o (i.e #[i bytecode])
          li.fragment #[i Garbage Collector]
          li.fragment Aloca√ß√£o Din√¢mica por padr√£o

        aside.notes.
          Explicar a questao do overhead da virtualizacao (instrucoes de hardware
          por instrucao da VM). Notar tambem quanto ao fato de o problema ser o
          uso de #[i Tracing] e nao de garbage collectors em geral. Explicar quanto
          a alocacao dinamica automatica (como para arrays e strings por exemplo).

    section
      h6: i Proposta
      h2 YAL

      p.
        Uma linguagem simples, feita para ser f√°cil de ler e entender,
        modernizando, e n√£o revolucionando, a linguagem C.

    section
      h6: i Proposta

      table
        tr
          th Feature
          th C
          th C++
          th Rust
          th YAL
        tr
          td Ponteiros
          td Sim
          td Sim
          td Sim #[small #[sub 1]]
          td Sim
        tr
          td Referencias
          td N√£o
          td Sim
          td Sim
          td N√£o
        tr
          td Slices
          td N√£o
          td Parcial #[small #[sub 2]]
          td Sim
          td Sim
        tr
          td Heran√ßa
          td N√£o
          td Sim
          td N√£o
          td N√£o
        tr
          td M√≥dulos
          td N√£o
          td Parcial #[small #[sub 3]]
          td Sim
          td Sim
        tr
          td GC
          td N√£o
          td Opcional #[small #[sub 4]]
          td Opcional #[small #[sub 5]]
          td N√£o

      p: small Compara√ß√£o com outras linguagens #[br] Tabela I

      aside.notes.
        1: Ponteiros nao sao felizes em Rust.
        2: Explicar quanto aos problemas das versoes do C++.
        3: Explicar quanto ao uso de Rc e std::shared_ptr.

    section
      section
        h6: i Descri√ß√£o Sint√°tica e Sem√¢ntica
        h2 Hello, World!

        pre: code(data-line-numbers="" class="language-go")
          script(type="text/template").
            module main;

            // from libc
            @extern
            func printf(fmt: [*]const u8, ...);

            func main() {
                printf("Hello, %s!\n".ptr, "World".ptr);
            }

        aside.notes.
          Coisas para notar: o uso de modulos, o uso de printf da libc.
          O uso de ptr nos strings.

      section
        h6: i Descri√ß√£o Sint√°tica e Sem√¢ntica
        h2 Literais B√°sicas

        aside.notes
          ul
            li \a: bell (BEL);
            li \b: backspace (BS);
            li \e: escape (ESC);
            li \f: form feed (FF);
            li \n: newline;
            li \r: carriage return;
            li \t: tab;
            li \t: vertical tab (VT);
            li \\: adicionar o caractere \.
            li \": adicionar o caractere ".
            li \': adicionar o caractere '.
            li \0: adicionar o caractere nulo.
            li \xNN: adicionar um n√∫mero hexadecimal com valor definido pelos 2 dƒ±ÃÅgitos hexadecimais NN.

        .grid.grid-cols-2
          div
            h4 Num√©ricas

            ul
              li #[b 16]
              li #[b 0x10]
              li #[b 0o20]
              li #[b 0b10000]
              li #[b 3.14]
              li.fragment #[b 1_000_000]

          div
            h4 Strings

            ul
              li #[b "um string!"]
              li #[b "um\n\tstring!"]
              li #[b "\xf0\x9f\x98\x80"]
              li.fragment "üòÄ"

        aside.notes.
          Notar que strings arbitrarios em UTF-8 sao suportados.

    section
      section(data-auto-animate="")
        h6: i Descri√ß√£o Sint√°tica e Sem√¢ntica
        h2 Declara√ß√µes

        pre: code(data-line-numbers="|2|5,10|8,13" class="language-go")
          script(type="text/template").
            // declarar uma variavel do tipo i32
            var x: i32;
            // declarar uma variavel do tipo i32 com valor
            // inicial 12
            var y: i32 = 12;
            // declarar uma variavel com tipo inferido i32 e
            // valor inicial 12
            var z = 12;
            // declarar uma constante do tipo u64 e valor 12
            def a: u64 = 12;
            // declarar uma constante com tipo inferido e
            // valor 12
            def b = 12;

      section(data-auto-animate="")
        h6: i Descri√ß√£o Sint√°tica e Sem√¢ntica
        h2 Declara√ß√µes

        p.
          Vari√°veis n√£o s√£o deixadas sem valor inicializado, sempre recebendo
          um valor padr√£o definido.

        pre: code(data-line-numbers="" class="language-go")
          script(type="text/template").
            var x: i32;    // = 0
            var y: [2]i32; // = [12]i32{0, 0}

        .fragment
          p Constantes requerem um valor inicial.

          pre: code(data-line-numbers="" class="language-go")
            script(type="text/template").
              def ZERO = 0;

      section(data-auto-animate="")
        h6: i Descri√ß√£o Sint√°tica e Sem√¢ntica
        h2 Declara√ß√µes

        p.
          Declara√ß√µes m√∫ltiplas permitem declarar v√°rios valores ao mesmo
          tempo. Essa #[i feature] existem principalmente por conta de
          retornos m√∫ltiplos.

        pre: code(data-line-numbers="" class="language-go")
          script(type="text/template").
            var x, y = 69, 420;

        p Constantes tamb√©m suportam declara√ß√µes m√∫ltiplas.

        pre: code(data-line-numbers="" class="language-go")
          script(type="text/template").
            def ZERO, ONE = 0, 1;

        aside.notes.
          Explicar que o motivo para se ter declaracoes multiplas eh para
          retornos multiplos.

      section(data-auto-animate="")
        h6: i Descri√ß√£o Sint√°tica e Sem√¢ntica
        h2 Declara√ß√µes

        p.
          YAL permite redefinir o mesmo nome v√°rias vezes no mesmo escopo.
          Isso permite efetivamente modificar o tipo de uma vari√°vel.

        pre: code(data-line-numbers="" class="language-go")
          script(type="text/template").
            func main(argc: i32, argv: [*][*]u8) i32 {
                var argv = argv[:argc];

                return 0;
            }

        aside.notes.
          Explicar a utilidade de redefinicoes para tratamento de erros e
          transformacoes sequenciais de dados. Previne quanto a poluicao
          do escopo local.

      section
        h6: i Descri√ß√£o Sint√°tica e Sem√¢ntica
        h2 Atribui√ß√µes

        pre: code(data-line-numbers="" class="language-go")
          script(type="text/template").
            a, b = b, a;

        .fragment
          p.
            Atribui√ß√µes n√£o s√£o express√µes, de forma que o seguinte n√£o √©
            poss√≠vel:

          pre: code(data-line-numbers="" class="language-go")
            script(type="text/template").
              a = b = 2;

    section
      section(data-auto-animate="")
        h6: i Descri√ß√£o Sint√°tica e Sem√¢ntica
        h2 M√≥dulos

        p.
          YAL organiza o c√≥digo em m√≥dulos, compostos por 1 ou mais arquivos
          em um diret√≥rio, identificados pela primeira linha de cada arquivo.

      section(data-auto-animate="")
        h6: i Descri√ß√£o Sint√°tica e Sem√¢ntica
        h2 M√≥dulos

        pre: code(data-line-numbers="" class="language-go")
          script(type="text/template").
            // main.yal
            module main;

            func main() {
                printf("Hello, %s!\n".ptr, "World".ptr);
            }

        pre: code(data-line-numbers="" class="language-go")
          script(type="text/template").
            // c.yal
            module main;

            // from libc
            @extern
            func printf(fmt: [*]const u8, ...);

        aside.notes.
          Explicar a questao de problemas quanto dependencias circulares, e
          como o namespace compartilhado remove a maioria desses casos.
          Declaracoes sao publicas por padrao, caso necessario, explicar quanto
          a @private e @private(.file).

    section
      section
        h6: i Descri√ß√£o Sint√°tica e Sem√¢ntica
        h2 Controle de Fluxo

        pre: code(data-line-numbers="" class="language-go")
          script(type="text/template").
            if condition {
                // ...
            }

            while condition {
                // ...
            }

        aside.notes.
          Tornar claro porque algumas construcoes estao faltantes: for,
          do/while, switch.

      section
        h6: i Descri√ß√£o Sint√°tica e Sem√¢ntica
        h2 Controle de Fluxo

        p.
          Uma declara√ß√£o pode ser adicionada antes da condicao para evitar
          poluir o escopo local.

        pre: code(data-line-numbers="" class="language-go")
          script(type="text/template").
            if var x = foo(); x < 0 {
                printf("x √© negativo: %d\n", x);
            } else if x > 0 {
                printf("x √© positivo: %d\n", x);
            } else {
                printf("x √© zero: %d\n", x);
            }

        aside.notes.
          Go, Odin e C++ possuem essa funcionalidade tambem.

      section(data-auto-animate="")
        h6: i Descri√ß√£o Sint√°tica e Sem√¢ntica
        h2 defer

        pre: code(data-line-numbers="" class="language-go")
          script(type="text/template").
            func main() {
                var mem = malloc(100 * sizeof(i32));
                defer free(mem);

                do_stuff(mem);

                // free(mem) chamado aqui
            }

      section(data-auto-animate="")
        h6: i Descri√ß√£o Sint√°tica e Sem√¢ntica

        pre.r-stretch: code(data-line-numbers="" class="language-go")
          script(type="text/template").
            func main() {
                defer printf("end 1\n");
                defer printf("end 2\n");

                {
                    var mem = malloc(100 * sizeof(i32));
                    defer free(mem);

                    {
                        defer printf("ok\n");

                        do_stuff(mem);
                        // printf("ok\n") chamado aqui
                    }
                    // free(mem) chamado aqui
                }
                // printf("end 2\n") chamado aqui
                // printf("end 1\n") chamado aqui
            }

        aside.notes.
          Explicar como difere do defer do Go, que funciona a escopo da
          funcao.

      section(data-auto-animate="")
        h6: i Descri√ß√£o Sint√°tica e Sem√¢ntica

        pre.r-stretch: code(data-line-numbers="|1|2-5|6|8|9-20" class="language-go")
          script(type="text/template").
            func read_file_data(path: [*]const u8) (i32, i32, bool) {
                var f = fopen(path, "rb".ptr);
                if f == nil {
                    return 0, 0, false;
                }
                defer fclose(f);

                var a, b: i32, i32;
                if var n = fread(&a, sizeof(a), 1, f); n!=1 {
                    // fclose(f) chamado
                    return 0, 0, false;
                }

                if var n = fread(&b, sizeof(b), 1, f); n!=1 {
                    // fclose(f) chamado
                    return 0, 0, false;
                }

                // fclose(f) chamado
                return a, b, true;
            }

    section
      section
        h6: i Descri√ß√£o Sint√°tica e Sem√¢ntica
        h2 Fun√ß√µes

        p.
          Fun√ß√µes podem retornar mais de um valor, algo especialmente √∫til
          para tratamento de erros.

        pre: code(data-line-numbers="" class="language-go")
          script(type="text/template").
            func read_file_data(path: [*]const u8) (i32, i32, bool) {
                // ...
            }

      section(data-auto-animate="")
        h6: i Descri√ß√£o Sint√°tica e Sem√¢ntica
        h2 Fun√ß√µes

        pre: code(data-line-numbers="" class="language-c")
          script(type="text/template").
            int c_init_wifi(int mode, wifi_spec_t* specs);

            int main() {
                wifi_spec_t spec;
                int err = c_init_wifi(MODE_STATION, &spec);
                if (err != ERR_NONE) { /* ... */ }
            }

        aside.notes.
          Esse tipo de API eh muito comum em plataformas embarcadas como ESP-32.

      section(data-auto-animate="")
        h6: i Descri√ß√£o Sint√°tica e Sem√¢ntica
        h2 Fun√ß√µes

        pre: code(data-line-numbers="|1-2|4|5-7|11" class="language-go")
          script(type="text/template").
            @extern
            func c_init_wifi(mode: i32, specs: *wifi_spec_t) i32;

            func init_wifi(mode: i32) (wifi_spec_t, i32) {
                var spec: wifi_spec_t;
                var err = c_init_wifi(mode, &spec);
                return spec, err;
            }

            func main() {
                var spec, err = init_wifi(MODE_STATION);
                if err != ERR_NONE {}
            }

        aside.notes.
          Explicar como essa arquitetura de retornos multiplos nao apresenta
          overhead quando o numero de retornos eh menor ou igual a dois, ja
          que a maioria das arquiteturas possui dois registradores reservados
          para valores de retorno. De qualquer forma, uma convencao de chamada
          customizada poderia ser usada com mais registradores reservados para
          casos especificos.

    section
      section
        h6: i Descri√ß√£o Sint√°tica e Sem√¢ntica
        h2 Tipos B√°sicos

        ul
          li N√∫meros Inteiros
          li N√∫meros de Ponto Flutuante
          li Ponteiros
          li Strings

      section
        h6: i Descri√ß√£o Sint√°tica e Sem√¢ntica
        h2 Inteiros

        table
          tr
            th Tamanho
            th Com Sinal
            th Sem Sinal
            th Em C/C++
          tr
            td 1B
            td i8
            td u8
            td char
          tr
            td 2B
            td i16
            td u16
            td short
          tr
            td 4B
            td i32
            td u32
            td int
          tr
            td 8B
            td i64
            td u64
            td long long

        p: small Tipos Inteiros #[br] Tabela II

        aside.notes.
          Lembrar que int nao eh garantido de ter sempre tem 32bits, como no caso
          de plataformas de 8 bits como ATMega, onde tem 16bits.

      section
        h6: i Descri√ß√£o Sint√°tica e Sem√¢ntica
        h2 Ponto Flutuante

        ul
          li #[b f32]: float
          li #[b f64]: double

        aside.notes.
          Poderia se adicionar suporte futuro a tipos de alta precisao da
          plataforma x87 como long double 80bits. Tipos como Decimal seriam
          implementados como bibliotecas.

      section
        h6: i Descri√ß√£o Sint√°tica e Sem√¢ntica
        h2 Ponteiros

        table.text-3xl
          tr
            th Tipo YAL
            th Descri√ß√£o
            th Em C/C++
          tr
            td *T
            td Ponteiro para um valor mut√°vel
            td T*
          tr
            td *const T
            td Ponteiro para um valor imut√°vel
            td T const*
          tr
            td [*]T
            td Ponteiro para um array de valores mut√°vel
            td T*
          tr
            td [*]const T
            td Ponteiro para um array de valores imut√°vel
            td T const*

        p: small Tipos de Ponteiros #[br] Tabela III

        p.text-4xl.
          Tamb√©m existe o tipo #[b rawptr], equivalente ao tipo #[b void*] em C
          que pode ser convertido de qualquer ponteiro para qualquer ponteiro.

        aside.notes.
          Notar a importancia de um tipo rawptr em uma linguagem de baixo nivel.
          Nao eh possivel usar memoria de forma generica sem um tipo como rawptr.

      section
        h6: i Descri√ß√£o Sint√°tica e Sem√¢ntica
        h2 Strings

        -a="[]const u8"
        p.
          O tipo #[b string_view] √© um tipo exclusivo para strings, sendo uma
          extens√£o do tipo #[b #{a}]. Um tipo exclusivo para strings evita a
          confus√£o comum quanto ao uso de #[b const char*] presente em C.

        aside.notes.
          Porque strings possuem somente um tipo imutavel. Notar a importancia
          de um tipo StringBuilder na biblioteca padrao.

    section
      section
        h6: i Descri√ß√£o Sint√°tica e Sem√¢ntica
        h2 Tipos Compostos

        ul
          li Arrays
          li Estruturas
          li Slices

        aside.notes.
          Explicar quanto a falta de um tipo de uniao. Nao foi implementado por
          falta de tempo, sendo que sua funcao pode ser emulada por arrays e
          ponteiros.

      section
        h6: i Descri√ß√£o Sint√°tica e Sem√¢ntica
        h2 Arrays

        pre: code(data-line-numbers="1|2|3-6" class="language-go")
          script(type="text/template").
            var arr = [3]i32{1, 2, 3};
            var arr = [_]i32{1, 2, 3};
            var arr = [_]i32{1, 2, 3}; // [3]i32
            var ptr = arr.ptr; // [*]i32
            var len = arr.len; // usize

        aside.notes.
          Explicar a falta de rebaixamento para ponteiro como em C/C++, e copia
          quando atribuido e passado para funcoes.

      section
        h6: i Descri√ß√£o Sint√°tica e Sem√¢ntica
        h2 Estruturas

        pre: code(data-line-numbers="1-4|6|8-9" class="language-go")
          script(type="text/template").
            struct {
                a: i32,
                b: i32,
            };

            var a: struct { item: i32 } = .{.item = 10};

            def S = struct { item: i32 };
            var b: S = .{.item = 10};

        aside.notes.
          Explicar a escolha de nao possuir uma declaracao como em C, C++ ou Rust
          mas tratar como uma declaracao. Uma extensao desse modelo eh que tipos
          poderiam ser manipulados como valores durante a compilacao, abrindo
          portas para meta-programas.

      section(data-auto-animate="")
        h6: i Descri√ß√£o Sint√°tica e Sem√¢ntica
        h2 Slices

        table.text-3xl
          tr
            th Linguagem
            th Slice Mut√°vel
            th Slice Imut√°vel
          tr
            td C
            td Sem suporte
            td Sem suporte
          tr
            td C++
            td std::span<T>
            td std::span<const T>
          tr
            td Rust
            td &mut [T]
            td &[T]
          tr
            td Go
            td []T
            td Sem suporte
          tr
            td Odin
            td []T
            td Sem suporte
          tr
            td Zig
            td []T
            td []const T
          tr
            td YAL
            td []T
            td []const T

        p: small Compara√ß√£o de Tipos Slice #[br] Tabela IV

        aside.notes.
          Explicar quanto a emulacao de slices em C. Notar quanto a Rust utilizar
          logica invertida quanto a mutabilidade. Explicar a escolha quanto a
          mutabilidade, e porque Go e Odin nao a possuem.

      section(data-auto-animate="")
        h6: i Descri√ß√£o Sint√°tica e Sem√¢ntica
        h2 Slices

        table.text-3xl
          tr
            th Linguagem
            th Opera√ß√£o
          tr
            td C
            td Sem suporte
          tr
            td C++
            td s.subspan(start, length)
          tr
            td Rust
            td &s[start..end]
          tr
            td Go
            td s[start:end]
          tr
            td Odin
            td s[start:end]
          tr
            td Zig
            td s[start..end]
          tr
            td YAL
            td s[start:end]

        p: small Compara√ß√£o da Sintaxe de Slicing #[br] Tabela V

    section
      section
        h6: i Ferramentas
        h2 Compilador

        .flex.justify-center
          img(src="/pipeline.svg" class="w-3/5")

        p.text-3xl.
          Feito em C++23 como um compilador de v√°rias passadas.

        aside.notes.
          Explicar as transformacoes feitas por cada etapa, especialmente quanto
          a resolucao de nomes e analise semantica. A IR tambem eh um ponto
          importante de explicar. Explicar o uso de QBE e nao LLVM ou compilacao
          direta.

      section(data-auto-animate="")
        h6: i Ferramentas
        h2 Testes

        p #[i Snapshot Testing] com uma biblioteca pr√≥pria

        pre: code(data-line-numbers="" class="language-cpp")
          script(type="text/template").
            run_test(ctx, p, "function call and return",
                     R"(module main;

            func id(x: i32) i32 { return x; }

            @export
            func main() i32 {
                var x = 68;
                return id(x);
            }
            )");

        aside.notes.
          Explicar porque uma biblioteca propria. Explicar porque nao usar testes
          unitarios padroes. Explicar o uso de JSON e os desafios/vantagens de
          serializacao.

      section
        h6: i Ferramentas
        h2 Testes

        .flex.justify-center
          img(src="/testbench.png" class="w-3/5")

    section
      section(data-auto-animate="")
        h2 Valida√ß√£o

        pre: code(data-line-numbers="|1|3|4-5|7-8" class="language-go")
          script(type="text/template").
            module main;

            func main(argc: i32, argv: [*][*]u8) i32 {
                var items = [_]i32{ 8, 7, 2, 1, 0, 9, 6 };
                print_items(items[:]);

                quicksort(items[:], 0, items.len as i32 - 1);
                print_items(items[:]);

                return 0;
            }

      section(data-auto-animate="")
        h2 Valida√ß√£o

        pre: code(data-line-numbers="|2-4,7" class="language-go")
          script(type="text/template").
            func print_items(items: []i32) {
                var i: usize = 0;
                while i < items.len {
                    defer i = i + 1;

                    c_printf("%d, ".ptr, items[i]);
                }

                c_printf("\n".ptr);
                return;
            }

      section(data-auto-animate="")
        h2 Valida√ß√£o

        pre.r-stretch: code(data-line-numbers="|2|4-6,11|9,13" class="language-go")
          script(type="text/template").
            func partition(a: []i32, low: i32, high: i32) i32 {
                var pivot, i = a[high], low - 1;

                var j = low;
                while j < high {
                    defer j = j + 1;
                    if a[j] <= pivot {
                        i = i + 1;
                        a[i], a[j] = a[j], a[i];
                    }
                }

                a[i+1], a[high] = a[high], a[i+1];

                return i + 1;
            }

      section(data-auto-animate="")
        h2 Valida√ß√£o

        pre: code(data-line-numbers="" class="language-go")
          script(type="text/template").
            func quicksort(a: []i32, low: i32, high: i32) {
                if low < high {
                    var pivot = partition(a, low, high);
                    quicksort(a, low, pivot-1);
                    quicksort(a, pivot+1, high);
                }

                return;
            }

      section(data-auto-animate="")
        h2 Valida√ß√£o

        pre.r-stretch: code(data-line-numbers="|2-3" class="language-go")
          script(type="text/template").
            func gen_file(path: [*]const u8, n: usize) {
                var f = c_fopen(path, "wb".ptr);
                defer c_fclose(f);

                var i: usize = 0;
                while i < n {
                    defer i = i + 1;

                    var v = c_rand() % n as i32;
                    var v = v;
                    var n = c_fwrite(&v, sizeof(i32), 1, f);
                }

                return;
            }

        aside.notes.
          Notar quanto a falta de completude da implementacao Rust devido a
          necessidade de dependencias. Falar sobre gerenciadores de pacote e
          seus riscos?

      section(data-auto-animate="")
        h2 Valida√ß√£o

        pre.r-stretch: code(data-line-numbers="|2,5|3,14|7-9,13" class="language-go")
          script(type="text/template").
            func read_values(path: [*]const u8, count: usize) []i32 {
                var f = c_fopen(path, "rb".ptr);
                if f as usize == 0 { return [_]i32{}[:]; }

                defer c_fclose(f);

                var ok = true;
                var buffer = c_malloc(sizeof(i32) * count) as [*]i32;
                defer if ok == false { c_free(buffer); }

                var read = c_fread(buffer, sizeof(i32), count, f);
                if read != count {
                    ok = false;
                    return [_]i32{}[:];
                }

                return buffer[:count];
            }

        aside.notes.
          Notar quanto a falta de retornos multiplos devido a forma como
          valores sao tratados na representacao intermediaria. Notar a
          falta de valores nulos, algo que seria desejado.

      section(data-auto-animate="")
        h2 Valida√ß√£o

        table.text-3xl
          tr
            th Linguagem
            th Linhas de C√≥digo
            th Bin√°rio (KiB)
            th RAM (KiB)
            th Compila√ß√£o (ms)
            th Execu√ß√£o (ms)
          tr
            td C
            td 102
            td 13,05
            td 3,82
            td 57,7 ¬± 0,6
            td 161,1 ¬± 2,6
          tr
            td C++
            td 102
            td 14,02
            td 3,89
            td 769,5 ¬± 4,7
            td 156,6 ¬± 1,2
          tr
            td Rust
            td 97
            td 3.894,36
            td 8,00
            td 179,8 ¬± 0,9
            td 349,2 ¬± 2,3
          tr
            td YAL
            td 114
            td 13,77
            td 3,82
            td 16,2 ¬± 0,2
            td 158,0 ¬± 1,1

        p: small Compara√ß√£o quantitativa entre implementa√ß√µes da mesma fun√ß√£o em diferentes linguagens compiladas #[br] Tabela IX

        aside.notes.
          Explicar quanto a explosao de trabalho para o compilador C++ quanto ao
          uso de includes (iostream). Notar quanto ao uso excessivo de memoria e
          tempo do Rust (se necessario, como isso poderia ser minimizado). Notar
          quanto ao tamanho do executavel Rust dada a presenca de dados de todos
          os arquivos e debug.

      section
        h2 Valida√ß√£o

        .flex.justify-center
          img(src="/benchmark-compile.png" class="w-2/3")

        aside.notes.
          Notar como o tempo de compilacao em YAL conta com 4 programas separados:
          bash, YAL, QBE e assembler.

      section
        h2 Valida√ß√£o

        .flex.justify-center
          img(src="/benchmark-sort.png" class="w-2/3")

    section
      h2 Yet Another Language
      h3 (YAL)

      .grid.grid-cols-2.mt-40
        small Lucas da Silveira Ross
        small Marcelo V. C. Arag√£o

      aside.notes.
        We live!

// vim: ts=2 sts=2 sw=2 et
