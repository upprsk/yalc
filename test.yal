module main;

func partition(a: []i32, low: i32, high: i32) i32 {
    var pivot, i = a[high], low - 1;

    var j = low;
    while j < high {
        defer j = j + 1;
        if a[j] <= pivot {
            i = i + 1;
            a[i], a[j] = a[j], a[i];
        }
    }

    a[i+1], a[high] = a[high], a[i+1];
    return i + 1;
}

func quicksort(a: []i32, low: i32, high: i32) {
    c_printf("quicksort(low=%d, high=%d, %d)\n".ptr, low, high);
    if low < high {
        var pivot = partition(a, low, high);
        c_printf("  pivot=%d\n".ptr, pivot);
        quicksort(a, low, pivot-1);
        quicksort(a, pivot+1, high);
    }

    return;
}

func print_items(items: []i32) {
    var i: usize = 0;
    while i < items.len {
        defer i = i + 1;

        c_printf("%d, ".ptr, items[i]);
    }

    c_printf("\n".ptr);
    return;
}

func main(argc: i32, argv: [*][*]u8) i32 {
    var items = [_]i32{ 8, 7, 2, 1, 0, 9, 6 };
    print_items(items[:]);

    quicksort(items[:], 0, items.len as i32 - 1);
    print_items(items[:]);

    return 0;
}

// vim: ft=yal

