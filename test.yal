Counter := record {
    count: u32;
    end: u32;
};

new_counter := .(end: u32) -> Counter {
    return .{.count=0, .end=end};
};

step := .(c: *Counter) -> bool {
    c.count = c.count + 1;
    return c.count < c.end;
};

int := i32;

export "main" main := .() -> int {
    c_fprintf(c_stdout, "age > ");
    c_fflush(c_stdout);

    age := 0;
    _ = c_scanf("%d", age&);

    c_fprintf(c_stdout, "got age: %d\n", age);

    return 0;
};

FILE := opaque record {};
extern "stdout"  c_stdout: *FILE;
extern "stderr"  c_stderr: *FILE;

extern "fprintf" c_fprintf: .(file: *FILE, fmt: [*:0]i8, ...) -> void;
extern "fflush"  c_fflush: .(file: *FILE) -> void;
extern "printf"  c_printf:  .(fmt: [*:0]i8, ...) -> void;
extern "scanf"   c_scanf:   .(fmt: [*:0]i8, ...) -> i32;
