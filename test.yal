module main;

func read_count() i32 {
    var count = 0;

    c_printf("count: ".ptr);
    c_scanf("%d".ptr, &count);

    return count;
}

func allocate_array(count: i32) []i32 {
    var ptr: [*]i32 = c_malloc(count as usize * sizeof(i32));
    return ptr[:count];
}

func fill_array(arr: []i32) {
    var i  = 10;
    var it = arr;
    while it.len > 0 {
        defer {
            it = it[1:];
            i  = i + 10;
        }

        it[0] = i;
    }

    return;
}

func print_array(arr: []const i32) {
    var it = arr;
    while it.len > 0 {
        defer it = it[1:];

        c_printf("- %d\n".ptr, it[0]);
    }

    return;
}

func main(argc: i32, argv: [*][*]u8) i32 {
    var count = read_count();
    var arr   = allocate_array(count);
    defer c_free(arr.ptr);

    fill_array(arr);
    print_array(arr);

    return 0;
}

// vim: ft=yal

