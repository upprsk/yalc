Counter := record {
    count: u32;
    end: u32;
};

new_counter := .(end: u32) -> Counter {
    return .{.count=0, .end=end};
};

step := .(c: *Counter) -> bool {
    c.count = c.count + 1;
    return c.count < c.end;
};

int := i32;

export "main" main := .() -> int {
    c_printf("enter number:\n");
    defer c_printf("done\n");

    v: u32 = 0;
    _ = c_scanf("%d", v&);
    c := new_counter(v);
    defer c_printf("done 2\n");

    while step(c&) {
        defer c_printf("bye!\n");
        say_hello_n(c.count);

        while c.count == 2 {
            return 1;
        }
    }

    return 0;
};

say_hello_n := .(n: u32) {
    defer c_printf("\n");

    c_printf("hello %d!", n);
};

extern "printf" c_printf: .(fmt: [*:0]i8, ...) -> void;
extern "scanf" c_scanf: .(fmt: [*:0]i8, ...) -> i32;
