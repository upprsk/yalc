file     ::= { top_stmt } ;
top_stmt ::= func
           | def_decl
           | var_decl
           | import
           ;

func          ::= "func" { ID "." } ID [ "[" generic_args "]" ] "(" func_args ")" [ func_ret ] block ;
extern_func   ::= "extern" "func" { ID "." } ID "(" func_args ")" [ func_ret ] ";" ;
generic_args  ::= generic_arg { "," generic_arg } [ "," ] ;
generic_arg   ::= ID [ ":" expr ] ;
func_args     ::= func_arg { "," func_args } [ "," ] ;
func_arg      ::= ID ":" expr ;
func_ret      ::= expr
                | "(" { func_ret_part } ")"
                ;
func_ret_part ::= ID ":" expr
                | expr
                ;

import ::= "import" STR [ "as" ID ];

(* Statements *)

stmt ::= expr ";"
       | return_stmt
       | if_stmt
       | while_stmt
       | for_stmt
       | switch_stmt
       | block
       | def_decl
       | var_decl
       | assign
       | break
       | defer
       ;

return_stmt ::= "return" [ open_expr_pack ] ";" ;
if_stmt     ::= "if" expr block [ "else" block ]
              | "if" var_decl expr block [ "else" block ]
              ;
while_stmt  ::= "while" expr block
              | "while" var_decl expr block
              ;
for_stmt    ::= "for" ID [ "," ID ] "in" expr block ;
switch_stmt ::= "switch" expr { switch_stmt }
              | "switch" var_decl expr { switch_stmt }
              ;
switch_stmt ::= "case" expr ":" { stmt }
               | "default" ":" { stmt }
               ;

block ::= "{" { stmt } "}" ;

def_decl ::= "def" id_pack [ ":" expr ] "=" expr ";" ;

var_decl ::= "var" id_pack [ ":" expr ] "=" expr ";"
           | "var" id_pack ":" expr [ "=" expr ] ";"
           ;

id_pack ::= ID { "," ID } ;

(* not all expressions are valid in the lhs, but we don't check for this during
   parsing *)
assign ::= expr ( "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "|=" | "&=" | "^=" | "<<=" | ">>=") expr ";" ;

break ::= "break" ";" ;
defer ::= "defer" stmt ;

(* Expressions *)

expr           ::= logic_or ;

(* some languages call this tuples, but we don't have tuples, this is used for multiple returns/decls *)
open_expr_pack ::= expr { "," expr } ; (* NOTE: no trailing commas here *)
expr_pack      ::= "(" open_expr_pack [ "," ] ")" ;

logic_or  ::= logic_and { "or" logic_and } ;
logic_and ::= bin_or { "and" bin_or } ;

bin_or  ::= bin_xor { "|" bin_xor } ;
bin_xor ::= bin_and { "^" bin_and } ;
bin_and ::= equality { "&" equality } ;

equality   ::= comparison { ( "!=" | "==" ) comparison } ;
comparison ::= shift { ( ">" | ">=" | "<=" | "<" ) shift } ;
shift      ::= term { ( "<<" | ">>" ) term } ;
term       ::= factor { ( "+" | "-" ) factor } ;
factor     ::= cast { ( "*" | "/" | "%" ) cast } ;

cast  ::= unary { "as" unary }
        | unary "or_else" expr
        | unary "or_return"
        ;
unary ::= ( "!" | "+" | "-" | "~" | "&" | "?" ) unary
        | deref
        ;

deref ::= call { ".*" call } ;

call           ::= call { "(" call_args ")" }      (* func call *)
                 | call { "[" slice_or_index "]" } (* index/slicing *)
                 ;
field          ::= primary { "." ID }
call_args      ::= expr { "," expr } [ "," ] ;
slice_or_index ::= expr
                 | [ expr ] ":" [ expr ]
                 ;

primary ::= "(" expr ")"
          | "." ID
          | expr_pack
          | array
          | pointer_type
          | struct_type
          | enum_type
          | number
          | STR
          | ID
          ;

array ::= "[" ( expr | "_" ) "]" expr "{" array_items "}" ;
array_items ::= expr { "," expr } [ "," ] ;

(* slices are treated as pointers *)
pointer_type ::= "[" [ "*" ] "]" [ "const" ] unary
               | "*" [ "const" ] unary
               ;

struct_type  ::= "struct" "{" [ struct_field { "," struct_field } ] "}" ;
struct_field ::= ID ":" expr [ "=" expr ] ;

enum_type  ::= "enum" [ "of" expr ] "{" [ enum_field { "," enum_field } ] "}" ;
enum_field ::= ID [ "=" expr ] ;

number ::= INT | HEX | OCT | BIN | FLOAT ;
