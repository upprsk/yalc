<file> ::= <mod> EOF ;
<mod>  ::= { <decl> } ;

<decl>     ::= [ "extern" [ <string> ] ] <blk_decl> ;
<blk_decl> ::= <ident> ":" [ <expr> ] [ ( ":" | "=" ) <expr> ] ";" ;

<expr>   ::= "(" <expr> ")" | <prefix> | <infix>;
<prefix> ::= <unary>
           | <proc>
           | <ptr>
           | <int>
           | <ident>
           ;
<infix>  ::= <additive>
           | <multiplicative>
           | <call>
           ;

<unary>    ::= ( "-" | "!" ) <expr> ;
<proc>     ::= ".(" [ <proc_args> ] ")" [ <expr> ] <blk> ;
<ptr>      ::= "*" [ "const" ] <expr>
             | "[" [ <ptr_arr> ] "]" [ "const" ] <expr>
             ;
<int>      ::= INTEGER ;
<ident>    ::= IDENT ;

<additive>       ::= <expr> ( "+" | "-" ) <expr> ;
<multiplicative> ::= <expr> ( "*" | "/" ) <expr> ;
<call>           ::= <expr> "(" [ <call_args> ] ")" ;

<proc_args> ::= <proc_arg> { "," <proc_arg> } [ "," [ "..." [ "," ] ] ] ;
<proc_arg>  ::= <ident> [ ":" <expr> ] ;

<ptr_arr> ::= "*" [ ":" <expr> "]"
            | <expr>
            ;

<call_args> ::= <expr> { "," <expr> } [ "," ] ;

<blk>      ::= "{" { <blk_item> } "}" ;
<blk_item> ::= <blk_decl> | <stmt> ;

<stmt> ::= <stmt_ret>
         | <stmt_expr>
         | <stmt_if>
         | <stmt_while>
         ;

<stmt_ret>  ::= "return" [ <expr> ] ";" ;
<stmt_expr> ::= <expr> ";" ;
<stmt_if>   ::= "if" <expr> <blk> [ "else" <blk> ] ;
<stmt_while>   ::= "while" <expr> <blk> ;
